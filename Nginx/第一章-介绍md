## 是什么？

 Nginx同Apache一样都是一种`WEB服务器`。基于`REST架构`风格，**以统一资源描述符(Uniform Resources Identifier)URI或者统一资源定位符(Uniform Resources Locator)URL作为沟通依据，通过HTTP协议提供各种网络服务 **。 

*   Apache

    `说明：`

    Apache的发展时期很长，而且是毫无争议的世界第一大服务器。

    `优点:`

    C开发、稳定、开源、跨平台等等。

    `缺点：`

    1.  它出现的时间太长了，它兴起的年代，互联网产业远远比不上现在。所以它被设计为一个`重量级`的web服务器。
    2.  基于`Select网络模型(当用户发起一次请求，select模型就会遍历扫描当前所有的请求栈)`导致性能偏低，是`不支持高并发`的服务器。

    2.  **在Apache上运行数以万计的并发访问，会导致服务器消耗大量内存。操作系统对其进行进程或线程间的切换也消耗了大量的CPU资源，导致HTTP请求的平均响应速度降低**。

    3.  一个连接对应一个进程，进程死掉只会影响一个用户。

    >   这些都决定了Apache不可能成为高性能WEB服务器，轻量级高并发服务器Nginx就应运而生了。

*   Nginx

    `说明：`

     *Nginx*是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。 

    `优点:`

    C开发、轻量、占用资源底、高性能(Epool网络模型)、高并发(2~4万并发连接数 )、跨平台、热部署等等。

    `缺点：`

     对比apache不稳定，由于是`单进程多线程`，进程死掉会影响很多用户 

    >   这些都决定了Apache不可能成为高性能WEB服务器，轻量级高并发服务器Nginx就应运而生了。

*   WEB服务器

    严格意义上Web服务器只负责处理HTTP协议，接收各种静态和动态请求。web服务器可以直接处理静态请求，但是不能处理动态请求，需要建起转给应用服务器处理。

*   应用服务器

    应用服务器处理业务逻辑， 每种语言都有自己实现的应用服务器。但是其实现的协议和原理也是大同小异的。比如java有tomcat，jboss，python有tornado等等 。



## Nginx目录结构

| 路径                                                         |    类型    | 作用                            |
| :----------------------------------------------------------- | :--------: | :------------------------------ |
| /etc/nginx<br/>/etc/nginx/nginx.conf<br/>/etc/nginx/conf.d<br/>/etc/nginx/conf.d/default.conf | 配置⽂文件 | Nginx主配置⽂文件               |
| /etc/nginx/fastcgi_params<br/>/etc/nginx/scgi_params<br/>/etc/nginx/uwsgi_params | 配置⽂文件 | Cgi、 Fastcgi、 Uwcgi配置⽂文件 |
| /etc/nginx/win-utf<br/>/etc/nginx/koi-utf<br/>/etc/nginx/koi-win | 配置⽂文件 | Nginx编码转换映射⽂文件         |
| /etc/nginx/mime.types                                        | 配置⽂文件 | http协议的Content-Type与扩展名  |
| /usr/lib/systemd/system/nginx.service                        | 配置⽂文件 | 配置系统守护进程管理理器器      |
| /etc/logrotate.d/nginx                                       | 配置⽂文件 | Nginx⽇日志轮询,⽇日志切割      |
| /usr/sbin/nginx<br/>/usr/sbin/nginx-debug                    |    命令    | Nginx终端管理理命令             |
| /etc/nginx/modules<br/>/usr/lib64/nginx<br/>/usr/lib64/nginx/modules |   ⽬目录   | Nginx模块⽬目录                 |
| /usr/share/nginx<br/>/usr/share/nginx/html<br/>/usr/share/nginx/html/50x.html<br/>/usr/share/nginx/html/index.html |   ⽬目录   | Nginx默认站点⽬目录             |
| /usr/share/doc/nginx-1.12.2<br/>/usr/share/man/man8/nginx.8.gz |   ⽬目录   | Nginx的帮助⼿手册               |
| /var/cache/nginx                                             |   ⽬目录   | Nginx的缓存⽬目录               |
| /var/log/nginx                                               |   ⽬目录   | Nginx的⽇日志⽬目录             |

## 编译参数

* 查看Nginx编译参数

	```bash
	nginx	-V
	```

* 编译参数及其作用

	| 编译选项                                                     | 作用                                      |
	| ------------------------------------------------------------ | ----------------------------------------- |
	| --prefix=/etc/nginx<br/>--sbin-path=/usr/sbin/nginx<br/>--modules-path=/usr/lib64/nginx/modules<br/>--conf-path=/etc/nginx/nginx.conf<br/>--error-log-path=/var/log/nginx/error.log<br/>--http-log-path=/var/log/nginx/access.log<br/>--pid-path=/var/run/nginx.pid<br/>--lock-path=/var/run/nginx.lock | 程序安装⽬目录和路路径                    |
	| --http-client-body-temp-path=/var/cache/nginx/clie<br/>nt_tem<br/>--http-proxy-temp-path=/var/cache/nginx/proxy_te<br/>mp<br/>--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_<br/>temp<br/>--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_te<br/>mp<br/>--http-scgi-temp-path=/var/cache/nginx/scgi_temp | 临时缓存⽂文件                            |
	| --user=nginx<br/>--group=nginx                               | 设定Nginx进程启动⽤用户和组(安全          |
	| --with-cc-opt                                                | 设置额外的参数将被添加到CFLAG<br/>S变量量 |
	| --with-ld-opt                                                | 设置附加的参数, 链接系统库                |



## Nginx内置变量

* http请求变量量
* Nginx内置变量量
* ⾃自定义变量量

```bash
$uri:	当前请求的uri，不不带参数
$request_uri:	请求的uri，带完整参数
$host:	http请求报⽂文中host⾸首部,如果没有则以处理理此请求的虚拟主机的主机名代替
$hostname:	nginx服务运⾏行行在主机的主机名
$remote_addr:	客户端IP
$remote_port:	客户端端⼝口
$remote_user:	使⽤用⽤用户认证时客户端⽤用户输⼊入的⽤用户名
$request_filename:	⽤用户请求中的URI经过本地root或alias转换后映射的本地⽂文件路路径
$request_method:	请求⽅方法,	GET	POST	PUT
$server_addr:	服务器器地址
$server_name:	服务器器名称
$server_port:	服务器器端⼝口
$server_protocol:	服务器器向客户端发送响应时的协议,	如http/1.1	http/1.0
$scheme:在请求中使⽤用scheme,	如http://xxx.com中的http
$http_HEADER:	匹配请求报⽂文中指定的HEADER
$http_host:	匹配请求报⽂文中的host⾸首部
$document_root:	当前请求映射到的root配置
```







## 主要应用场景

![1610025476524](第一章-介绍md.assets/1610025476524.png)



## Nginx平台-OpenResty

 OpenResty ®是一个成熟的网络平台，整合了我们的加强版 [Nginx的](http://openresty.org/en/nginx.html)核心，我们的加强版[LuaJIT](https://github.com/openresty/luajit2)，许多浓墨重彩Lua库，大量的高品质[第三方的Nginx模块](http://openresty.org/en/components.html)，并且大部分外部依赖的。它旨在帮助开发人员轻松构建可伸缩的Web应用程序，Web服务和动态Web网关。 



*   下载

    http://openresty.org/en/download.html（win64版本即可）

*   启动

    >   解压缩后进入根目录执行nginx.exe

*   访问

    http://localhost/

    ![1610539853059](第一章-介绍md.assets/1610539853059.png)

`命令：`

````bash
#进入解压缩后根目录
--启动
根目录/nginx
--停止
根目录/nginx -s stop
--重启
根目录/nginx -s reload
--检验nginx配置是否正确
根目录/nginx -t
````











